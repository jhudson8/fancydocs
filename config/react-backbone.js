registerMixin({"title":"react-backbone","summary":"Connect [React](http://facebook.github.io/react/) to [React](http://facebook.github.io/react/) using a suite of focused mixins.","overview":"In addition to providing mixins which give Backbone awareness to React components, declaritive model events are made available similar to the ```events``` hash in Backbone.View.  This requires [react-events](https://github.com/jhudson8/react-events) to be included.  Model events can be defined using the ```model:``` prefix.\n\nFor example, by including the ```events``` mixin, you can do this:\n\n```\nReact.createClass({\n  mixins: ['events'],\n  events: {\n    'model:some-event': 'onSomeEvent',\n    // will bind to a specific model set as \"foo\" on this.props or this.refs\n    'model[foo]:some-event': 'onFooSomeEvent'\n  },\n  ...\n});\n```\nAnd Backbone.Events methods can be used on your component so your component allowing it to trigger events.\n\nIn addition, the following event callback wrappers are implemented (see [react-events](https://github.com/jhudson8/react-events)  for more details)\n* memoize\n* delay\n* defer\n* throttle\n* debounce\n* once\n\nFor example\n```\nevents: {\n  '*throttle(300):window:resize': 'forceUpdate'\n}\n```\n","api":{"API: Mixins":{"methods":{},"summary":"The named mixins exists by including [react-mixin-manager](https://github.com/jhudson8/react-mixin-manager).\n\nSee [examples](https://github.com/jhudson8/react-backbone/blob/master/test/test.js#L78)","packages":{"modelAware":{"overview":"Utility methods which allows other mixins to depend on ```getModel``` and ```setModel``` methods.  This provides an single overridable mixin should you have non-standard model population requirements.","methods":{"getModel":{"profiles":[""],"params":{},"summary":"The model can be set using the ```model``` property or by explicitely calling ```setModel```.","dependsOn":[],"overview":"```\nReact.createClass({\n  mixins: ['modelAware']\n});\n...\n<MyClass ref=\"myClass\" model={model} key=\"foo\"/>\n...\nvar model = this.refs.myClass.getModel();\n```","returns":"the model associated with the current React component."},"setModel":{"profiles":["model"],"params":{"model":"the Backbone model to set"},"summary":"Associate the model with the current React component which can be retrieved using ```getModel```","dependsOn":[],"overview":""}}},"modelValueAware":{"overview":"*depends on modelAware*\n\nUtility methods to get and set the model value for a specific attribute key.  This can be used by input components for example so the model attribute key can be abstracted away.\n\nThe ```key``` or ```ref``` attribute are used to specify the model key.\n\nConsumers can override this mixin to change model key retrieval strategies.  ","methods":{"getModelValue":{"profiles":[""],"params":{},"summary":"","dependsOn":[],"overview":"","returns":"the value from the model bound to the current React component using the ```key``` or ```ref``` property as the model attribute."},"setModelValue":{"profiles":["value"],"params":{"value":"the model value to set"},"summary":"Set the value on the model bound to the current React component using the ```key``` or ```ref``` property as the model attribute.","dependsOn":[],"overview":"","returns":"true if the model was set successfully and false otherwise"}}},"modelPopulate":{"overview":"*depends on modelAware*\n\nUtility mixin used to iterate child components and have their associated model value be set on the parent component model.","methods":{"modelPopulate":{"profiles":["componentArray[, callback, options]","callback[, options]"],"params":{"componentArray":"the array of components to iterate.  If falsy, all child components that contain a ```ref``` attribute will be used","callback":"the callback that will be executed ***only if*** the model passed validation when the attributes were set.  If provided, the model will be set automatically.","options":"the model set options (Backbone.Model.set options parameter)"},"summary":"Iterate child (or provided) components and have each component set it's ***UI*** input value on the model attributes.","dependsOn":[],"overview":"```\n// use this.refs automatically to get the components that will populate the model\nthis.modelPopulate(function(model) {\n  // assuming the model validation passed, this callback will be executed\n});\n\n// or for more control\nvar attributes = this.modelPopulate();\n\n// or for even more control\nvar attributes = this.modelPopulate(specificComponentsToCheck);\n```","returns":"the attribute values"}}},"modelEventAware":{"overview":"*depends on modelAware*\n\nUtility mixin to expose managed model binding functions which are cleaned up when the component is unmounted.\n\n```\nvar MyClass React.createClass({\n  mixins: ['modelEventAware'],\n  getInitialState: function() {\n    this.modelOn('change', this.onChange);\n    return null;\n  },\n  onChange: function() { ... }\n});\n```","methods":{"modelOn":{"profiles":["eventName, callback[, context]"],"params":{"eventName":"the event name","callback":"the event callback function","context":"the callback context"},"summary":"Equivalent to Backbone.Events.on","dependsOn":[],"overview":""},"modelOnce":{"profiles":["eventName, callback[, context]"],"params":{"eventName":"the event name","callback":"the event callback function","context":"the callback context"},"summary":"Equivalent to Backbone.Events.once","dependsOn":[],"overview":""},"modelOff":{"profiles":["eventName, callback[, context]"],"params":{"eventName":"the event name","callback":"the event callback function","context":"the callback context"},"summary":"Equivalent to Backbone.Events.off","dependsOn":[],"overview":""}}},"modelIndexErrors":{"overview":"Utility mixin to allow components to handle model validation error responses (used by the ```modelValidator``` mixin)","methods":{"modelIndexErrors":{"profiles":["errors"],"params":{"errors":"errors returned from the Backbone.Model.set ```invalid``` event"},"summary":"The expected input of the error object is ```[{field1Key: message}, {field2Key: message}, ...]```","dependsOn":[],"overview":"","returns":"errors in the format of ```{ field1Key: errorMessage, field2Key: errorMessage, ... }```"}}},"modelValidator":{"overview":"*depends on modelAware*","methods":{"modelValidate":{"profiles":["attributes, options"],"params":{"attributes":"the model attributes","options":"the set options"},"summary":"Call the associated model's validate method","dependsOn":[],"overview":"","returns":"the response from the model's validate method"}}},"modelInvalidAware":{"overview":"*depends on modelEventAware, modelIndexErrors*\n\nAllow components to be aware of field specific validation errors.\n\nListen for attribute specific model ```invalid``` events.  When these occur, normalize the error payload using the ```modelIndexErrors``` method from the ```modelIndexErrors``` mixin and set the components ```error``` state attribute with the normalized error value.\n\n```\nvar MyClass React.createClass({\n  mixins: ['modelInvalidAware'],\n  render: function() {\n    var error = this.state.error;\n    if (error) {\n      return 'Error: ' + error;\n    } else {\n      return 'No error';\n    }\n  }\n});\n```","methods":{}},"modelChangeAware":{"overview":"*depends on modelEventAware*\n\nWill force a render if the associated model has changed.  The \"change\" events are for models or collections and include\n\n* change\n* reset\n* add\n* remove\n* sort","methods":{}},"modelUpdateOn":{"overview":"*depends on modelEventAware*\n\nListen to a specific event (or array of events).  When this event is fired, the component will be force updated.  The events to listen for are defined as the ```updateOn``` component property which can be an array or array of strings.","methods":{"updateOnModelEvent":{"profiles":["events"],"params":{"events":"(string or array) event(s) to listen for to force a render"},"summary":"```\ngetInitialState: function() {\n  this.updateOnModelEvent(['event1');\n  return null;\n}\n```","dependsOn":[],"overview":""}}},"modelLoadOn":{"overview":"*depends on [jhudson8/backbone-async-event](https://github.com/jhudson8/backbone-async-event)*\n\nGives any comonent the ability to listen to a specific async event (or array of events).\n\nSee the docs in [jhudson8/backbone-async-event](https://github.com/jhudson8/backbone-async-event) for more details on the async events.\n\nWhen this event is fired, the state attribute ```loading``` will be set to ```true```.  state.loading will be set to false when the async event is complete.\n\nUse the ```loadOn``` property to define the specific async event to bind to.\n\n```\nrender: function() {\n  if (this.state.loading) {\n    // return something if we are loading\n  } else {\n    // return something if we are not loading\n  }\n}\n```","methods":{}},"modelAsyncAware":{"overview":"*depends on [jhudson8/backbone-async-event](https://github.com/jhudson8/backbone-async-event)*\n\nGives any comonent the ability to listen to ***all*** async events.\n\nSee the docs in [jhudson8/backbone-async-event](https://github.com/jhudson8/backbone-async-event) for more details on the async events.\n\nWhen ***any*** async event is fired, the state attribute ```loading``` will be set to ```true```.  state.loading will be set to false when the async event is complete.\n\n```\nrender: function() {\n  if (this.state.loading) {\n    // return something if we are loading\n  } else {\n    // return something if we are not loading\n  }\n}\n```","methods":{}}}}}});